<?php
/**
 * MUSeo.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUSeo
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

/**
 * HandleModules controller class.
 */
class MUSeo_Controller_Base_HandleModules extends Zikula_AbstractController
{
    /**
     * Post initialise.
     *
     * Run after construction.
     *
     * @return void
     */
    protected function postInitialize()
    {
        // Set caching to false by default.
        $this->view->setCaching(Zikula_View::CACHE_DISABLED);
    }

    /**
     * This is a custom method.
     *
     *
     * @return mixed Output.
     */
    public function checkModule()
    {
        $controllerHelper = new MUSeo_Util_Controller($this->serviceManager);
        
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'metatag', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'handlemodules', 'action' => 'checkModule');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
        }
        $permLevel = ACCESS_OVERVIEW;
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', $permLevel), LogUtil::getErrorMsgPermission());
        /** TODO: custom logic */
        
        // return template
        return $this->view->fetch('handlemodules/checkModule.tpl');
    }
    
    /**
     * This is a custom method.
     *
     *
     * @return mixed Output.
     */
    public function getEntities()
    {
        $controllerHelper = new MUSeo_Util_Controller($this->serviceManager);
        
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'metatag', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'handlemodules', 'action' => 'getEntities');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
        }
        $permLevel = ACCESS_OVERVIEW;
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', $permLevel), LogUtil::getErrorMsgPermission());
        /** TODO: custom logic */
        
        // return template
        return $this->view->fetch('handlemodules/getEntities.tpl');
    }
    
}
