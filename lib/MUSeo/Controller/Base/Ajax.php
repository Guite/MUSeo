<?php
/**
 * MUSeo.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUSeo
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

/**
 * Ajax controller class.
 */
class MUSeo_Controller_Base_Ajax extends Zikula_Controller_AbstractAjax
{


    /**
     * This method is the default function handling the main area called without defining arguments.
     *
     *
     * @return mixed Output.
     */
    public function main()
    {
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'metatag', FILTER_SANITIZE_STRING);
        
        $permLevel = ACCESS_OVERVIEW;
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::', '::', $permLevel), LogUtil::getErrorMsgPermission());
    }
    
    
    /**
     * Checks whether a field value is a duplicate or not.
     *
     * @param string $ot Treated object type.
     * @param string $fn Name of field to be checked.
     * @param string $v  The value to be checked for uniqueness.
     * @param string $ex Optional identifier to be excluded from search.
     *
     * @return Zikula_Response_Ajax
     */
    public function checkForDuplicate()
    {
        $this->checkAjaxToken();
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::Ajax', '::', ACCESS_EDIT));
        
        $postData = $this->request->request;
        
        $objectType = $postData->filter('ot', 'metatag', FILTER_SANITIZE_STRING);
        $controllerHelper = new MUSeo_Util_Controller($this->serviceManager);
        $utilArgs = array('controller' => 'ajax', 'action' => 'checkForDuplicate');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
        }
        
        $fieldName = $postData->filter('fn', '', FILTER_SANITIZE_STRING);
        $value = $postData->get('v', '');
        
        if (empty($fieldName) || empty($value)) {
            return new Zikula_Response_Ajax_BadData($this->__('Error: invalid input.'));
        }
        
        // check if the given field is existing and unique
        $uniqueFields = array();
        switch ($objectType) {
            case 'extension':
                    $uniqueFields = array('name');
                    break;
        }
        if (!count($uniqueFields) || !in_array($fieldName, $uniqueFields)) {
            return new Zikula_Response_Ajax_BadData($this->__('Error: invalid input.'));
        }
        
        $exclude = $postData->get('ex', '');
        $entityClass = 'MUSeo_Entity_' . ucfirst($objectType);
        /* can probably be removed
         * $object = new $entityClass();
         */ 
        
        $result = false;
        switch ($objectType) {
        case 'extension':
            $repository = $this->entityManager->getRepository($entityClass);
            switch ($fieldName) {
            case 'name':
                    $result = $repository->detectUniqueState('name', $value, $exclude);
                    break;
            }
            break;
        }
        
        // return response
        $result = array('isDuplicate' => $result);
        
        return new Zikula_Response_Ajax($result);
    }
}
