<?php
/**
 * MUSeo.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUSeo
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.7.0 (http://modulestudio.de).
 */

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for metatag entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 *
 * @abstract
 */
abstract class MUSeo_Entity_Base_Metatag extends Zikula_EntityAccess
{
    /**
     * @var string The tablename this object maps to.
     */
    protected $_objectType = 'metatag';
    
    /**
     * @var MUSeo_Entity_Validator_Metatag The validator for this entity.
     */
    protected $_validator = null;
    
    /**
     * @var boolean Option to bypass validation if needed.
     */
    protected $_bypassValidation = false;
    
    /**
     * @var array List of available item actions.
     */
    protected $_actions = array();
    
    /**
     * @var array The current workflow data of this object.
     */
    protected $__WORKFLOW__ = array();
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id.
     */
    protected $id = 0;
    
    /**
     * @ORM\Column(length=20)
     * @var string $workflowState.
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=255)
     * @var string $titleOfEntity.
     */
    protected $titleOfEntity = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $focusKeyword.
     */
    protected $focusKeyword = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $title.
     */
    protected $title = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $description.
     */
    protected $description = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $keywords.
     */
    protected $keywords = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $robotsIndex.
     */
    protected $robotsIndex = null;
    
    /**
     * @ORM\Column(length=255)
     * @var string $robotsFollow.
     */
    protected $robotsFollow = null;
    
    /**
     * @ORM\Column(length=255)
     * @var string $robotsAdvanced.
     */
    protected $robotsAdvanced = '-';
    
    /**
     * @ORM\Column(length=255)
     * @var string $canonicalUrl.
     */
    protected $canonicalUrl = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $redirectUrl.
     */
    protected $redirectUrl = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $facebookTitle.
     */
    protected $facebookTitle = '';
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @var text $facebookDescription.
     */
    protected $facebookDescription = '';
    
    /**
     * Facebook image meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $facebookImageMeta.
     */
    protected $facebookImageMeta = array();
    
    /**
     * @ORM\Column(length=255)
     * @var string $facebookImage.
     */
    protected $facebookImage = '';
    
    /**
     * The full path to the facebook image.
     *
     * @var string $facebookImageFullPath.
     */
    protected $facebookImageFullPath = '';
    
    /**
     * Full facebook image path as url.
     *
     * @var string $facebookImageFullPathUrl.
     */
    protected $facebookImageFullPathUrl = '';
    /**
     * @ORM\Column(length=255)
     * @var string $twitterTitle.
     */
    protected $twitterTitle = '';
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @var text $twitterDescription.
     */
    protected $twitterDescription = '';
    
    /**
     * Twitter image meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $twitterImageMeta.
     */
    protected $twitterImageMeta = array();
    
    /**
     * @ORM\Column(length=255)
     * @var string $twitterImage.
     */
    protected $twitterImage = '';
    
    /**
     * The full path to the twitter image.
     *
     * @var string $twitterImageFullPath.
     */
    protected $twitterImageFullPath = '';
    
    /**
     * Full twitter image path as url.
     *
     * @var string $twitterImageFullPathUrl.
     */
    protected $twitterImageFullPathUrl = '';
    /**
     * @ORM\Column(length=255)
     * @var string $googlePlusTitle.
     */
    protected $googlePlusTitle = '';
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @var text $googlePlusDescription.
     */
    protected $googlePlusDescription = '';
    
    /**
     * Google plus image meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $googlePlusImageMeta.
     */
    protected $googlePlusImageMeta = array();
    
    /**
     * @ORM\Column(length=255)
     * @var string $googlePlusImage.
     */
    protected $googlePlusImage = '';
    
    /**
     * The full path to the google plus image.
     *
     * @var string $googlePlusImageFullPath.
     */
    protected $googlePlusImageFullPath = '';
    
    /**
     * Full google plus image path as url.
     *
     * @var string $googlePlusImageFullPathUrl.
     */
    protected $googlePlusImageFullPathUrl = '';
    /**
     * @ORM\Column(length=255)
     * @var string $whatsAppTitle.
     */
    protected $whatsAppTitle = '';
    
    /**
     * @ORM\Column(type="bigint")
     * @var integer $pageAnalysisScore.
     */
    protected $pageAnalysisScore = 0;
    
    /**
     * @ORM\Column(length=50)
     * @var string $theModule.
     */
    protected $theModule = '';
    
    /**
     * @ORM\Column(length=50)
     * @var string $functionOfModule.
     */
    protected $functionOfModule = '';
    
    /**
     * @ORM\Column(length=50)
     * @var string $objectOfModule.
     */
    protected $objectOfModule = '';
    
    /**
     * @ORM\Column(length=20)
     * @var string $nameOfIdentifier.
     */
    protected $nameOfIdentifier = '';
    
    /**
     * @ORM\Column(type="bigint")
     * @var integer $idOfObject.
     */
    protected $idOfObject = 0;
    
    /**
     * @ORM\Column(length=50)
     * @var string $stringOfObject.
     */
    protected $stringOfObject = '';
    
    /**
     * @ORM\Column(length=255)
     * @var string $extraInfos.
     */
    protected $extraInfos = '';
    
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * @var integer $createdUserId.
     */
    protected $createdUserId;
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * @var integer $updatedUserId.
     */
    protected $updatedUserId;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @var datetime $createdDate.
     */
    protected $createdDate;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="update")
     * @var datetime $updatedDate.
     */
    protected $updatedDate;
    
    
    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        
        $serviceManager = ServiceUtil::getManager();
        $listHelper = new MUSeo_Util_ListEntries(ServiceUtil::getManager());
        
        $items = array();
        $listEntries = $listHelper->getRobotsIndexEntriesForMetatag();
        foreach ($listEntries as $listEntry) {
            if ($listEntry['default'] === true) {
                $items[] = $listEntry['value'];
            }
        }
        $this->robotsIndex = implode('###', $items);
        
        $items = array();
        $listEntries = $listHelper->getRobotsFollowEntriesForMetatag();
        foreach ($listEntries as $listEntry) {
            if ($listEntry['default'] === true) {
                $items[] = $listEntry['value'];
            }
        }
        $this->robotsFollow = implode('###', $items);
        
        $this->workflowState = 'initial';
        $this->initValidator();
        $this->initWorkflow();
    }
    
    /**
     * Get _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Set _object type.
     *
     * @param string $_objectType.
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Get _validator.
     *
     * @return MUSeo_Entity_Validator_Metatag
     */
    public function get_validator()
    {
        return $this->_validator;
    }
    
    /**
     * Set _validator.
     *
     * @param MUSeo_Entity_Validator_Metatag $_validator.
     *
     * @return void
     */
    public function set_validator(MUSeo_Entity_Validator_Metatag $_validator = null)
    {
        $this->_validator = $_validator;
    }
    
    /**
     * Get _bypass validation.
     *
     * @return boolean
     */
    public function get_bypassValidation()
    {
        return $this->_bypassValidation;
    }
    
    /**
     * Set _bypass validation.
     *
     * @param boolean $_bypassValidation.
     *
     * @return void
     */
    public function set_bypassValidation($_bypassValidation)
    {
        $this->_bypassValidation = $_bypassValidation;
    }
    
    /**
     * Get _actions.
     *
     * @return array
     */
    public function get_actions()
    {
        return $this->_actions;
    }
    
    /**
     * Set _actions.
     *
     * @param array $_actions.
     *
     * @return void
     */
    public function set_actions(array $_actions = Array())
    {
        $this->_actions = $_actions;
    }
    
    /**
     * Get __ w o r k f l o w__.
     *
     * @return array
     */
    public function get__WORKFLOW__()
    {
        return $this->__WORKFLOW__;
    }
    
    /**
     * Set __ w o r k f l o w__.
     *
     * @param array $__WORKFLOW__.
     *
     * @return void
     */
    public function set__WORKFLOW__(array $__WORKFLOW__ = Array())
    {
        $this->__WORKFLOW__ = $__WORKFLOW__;
    }
    
    
    /**
     * Get id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Set id.
     *
     * @param integer $id.
     *
     * @return void
     */
    public function setId($id)
    {
        $this->id = $id;
    }
    
    /**
     * Get workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Set workflow state.
     *
     * @param string $workflowState.
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        $this->workflowState = $workflowState;
    }
    
    /**
     * Get title of entity.
     *
     * @return string
     */
    public function getTitleOfEntity()
    {
        return $this->titleOfEntity;
    }
    
    /**
     * Set title of entity.
     *
     * @param string $titleOfEntity.
     *
     * @return void
     */
    public function setTitleOfEntity($titleOfEntity)
    {
        $this->titleOfEntity = $titleOfEntity;
    }
    
    /**
     * Get focus keyword.
     *
     * @return string
     */
    public function getFocusKeyword()
    {
        return $this->focusKeyword;
    }
    
    /**
     * Set focus keyword.
     *
     * @param string $focusKeyword.
     *
     * @return void
     */
    public function setFocusKeyword($focusKeyword)
    {
        $this->focusKeyword = $focusKeyword;
    }
    
    /**
     * Get title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Set title.
     *
     * @param string $title.
     *
     * @return void
     */
    public function setTitle($title)
    {
        $this->title = $title;
    }
    
    /**
     * Get description.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Set description.
     *
     * @param string $description.
     *
     * @return void
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }
    
    /**
     * Get keywords.
     *
     * @return string
     */
    public function getKeywords()
    {
        return $this->keywords;
    }
    
    /**
     * Set keywords.
     *
     * @param string $keywords.
     *
     * @return void
     */
    public function setKeywords($keywords)
    {
        $this->keywords = $keywords;
    }
    
    /**
     * Get robots index.
     *
     * @return string
     */
    public function getRobotsIndex()
    {
        return $this->robotsIndex;
    }
    
    /**
     * Set robots index.
     *
     * @param string $robotsIndex.
     *
     * @return void
     */
    public function setRobotsIndex($robotsIndex)
    {
        $this->robotsIndex = $robotsIndex;
    }
    
    /**
     * Get robots follow.
     *
     * @return string
     */
    public function getRobotsFollow()
    {
        return $this->robotsFollow;
    }
    
    /**
     * Set robots follow.
     *
     * @param string $robotsFollow.
     *
     * @return void
     */
    public function setRobotsFollow($robotsFollow)
    {
        $this->robotsFollow = $robotsFollow;
    }
    
    /**
     * Get robots advanced.
     *
     * @return string
     */
    public function getRobotsAdvanced()
    {
        return $this->robotsAdvanced;
    }
    
    /**
     * Set robots advanced.
     *
     * @param string $robotsAdvanced.
     *
     * @return void
     */
    public function setRobotsAdvanced($robotsAdvanced)
    {
        $this->robotsAdvanced = $robotsAdvanced;
    }
    
    /**
     * Get canonical url.
     *
     * @return string
     */
    public function getCanonicalUrl()
    {
        return $this->canonicalUrl;
    }
    
    /**
     * Set canonical url.
     *
     * @param string $canonicalUrl.
     *
     * @return void
     */
    public function setCanonicalUrl($canonicalUrl)
    {
        $this->canonicalUrl = $canonicalUrl;
    }
    
    /**
     * Get redirect url.
     *
     * @return string
     */
    public function getRedirectUrl()
    {
        return $this->redirectUrl;
    }
    
    /**
     * Set redirect url.
     *
     * @param string $redirectUrl.
     *
     * @return void
     */
    public function setRedirectUrl($redirectUrl)
    {
        $this->redirectUrl = $redirectUrl;
    }
    
    /**
     * Get facebook title.
     *
     * @return string
     */
    public function getFacebookTitle()
    {
        return $this->facebookTitle;
    }
    
    /**
     * Set facebook title.
     *
     * @param string $facebookTitle.
     *
     * @return void
     */
    public function setFacebookTitle($facebookTitle)
    {
        $this->facebookTitle = $facebookTitle;
    }
    
    /**
     * Get facebook description.
     *
     * @return text
     */
    public function getFacebookDescription()
    {
        return $this->facebookDescription;
    }
    
    /**
     * Set facebook description.
     *
     * @param text $facebookDescription.
     *
     * @return void
     */
    public function setFacebookDescription($facebookDescription)
    {
        $this->facebookDescription = $facebookDescription;
    }
    
    /**
     * Get facebook image.
     *
     * @return string
     */
    public function getFacebookImage()
    {
        return $this->facebookImage;
    }
    
    /**
     * Set facebook image.
     *
     * @param string $facebookImage.
     *
     * @return void
     */
    public function setFacebookImage($facebookImage)
    {
        $this->facebookImage = $facebookImage;
    }
    
    /**
     * Get facebook image full path.
     *
     * @return string
     */
    public function getFacebookImageFullPath()
    {
        return $this->facebookImageFullPath;
    }
    
    /**
     * Set facebook image full path.
     *
     * @param string $facebookImageFullPath.
     *
     * @return void
     */
    public function setFacebookImageFullPath($facebookImageFullPath)
    {
        $this->facebookImageFullPath = $facebookImageFullPath;
    }
    
    /**
     * Get facebook image full path url.
     *
     * @return string
     */
    public function getFacebookImageFullPathUrl()
    {
        return $this->facebookImageFullPathUrl;
    }
    
    /**
     * Set facebook image full path url.
     *
     * @param string $facebookImageFullPathUrl.
     *
     * @return void
     */
    public function setFacebookImageFullPathUrl($facebookImageFullPathUrl)
    {
        $this->facebookImageFullPathUrl = $facebookImageFullPathUrl;
    }
    
    /**
     * Get facebook image meta.
     *
     * @return array
     */
    public function getFacebookImageMeta()
    {
        return $this->facebookImageMeta;
    }
    
    /**
     * Set facebook image meta.
     *
     * @param array $facebookImageMeta.
     *
     * @return void
     */
    public function setFacebookImageMeta($facebookImageMeta = Array())
    {
        $this->facebookImageMeta = $facebookImageMeta;
    }
    
    /**
     * Get twitter title.
     *
     * @return string
     */
    public function getTwitterTitle()
    {
        return $this->twitterTitle;
    }
    
    /**
     * Set twitter title.
     *
     * @param string $twitterTitle.
     *
     * @return void
     */
    public function setTwitterTitle($twitterTitle)
    {
        $this->twitterTitle = $twitterTitle;
    }
    
    /**
     * Get twitter description.
     *
     * @return text
     */
    public function getTwitterDescription()
    {
        return $this->twitterDescription;
    }
    
    /**
     * Set twitter description.
     *
     * @param text $twitterDescription.
     *
     * @return void
     */
    public function setTwitterDescription($twitterDescription)
    {
        $this->twitterDescription = $twitterDescription;
    }
    
    /**
     * Get twitter image.
     *
     * @return string
     */
    public function getTwitterImage()
    {
        return $this->twitterImage;
    }
    
    /**
     * Set twitter image.
     *
     * @param string $twitterImage.
     *
     * @return void
     */
    public function setTwitterImage($twitterImage)
    {
        $this->twitterImage = $twitterImage;
    }
    
    /**
     * Get twitter image full path.
     *
     * @return string
     */
    public function getTwitterImageFullPath()
    {
        return $this->twitterImageFullPath;
    }
    
    /**
     * Set twitter image full path.
     *
     * @param string $twitterImageFullPath.
     *
     * @return void
     */
    public function setTwitterImageFullPath($twitterImageFullPath)
    {
        $this->twitterImageFullPath = $twitterImageFullPath;
    }
    
    /**
     * Get twitter image full path url.
     *
     * @return string
     */
    public function getTwitterImageFullPathUrl()
    {
        return $this->twitterImageFullPathUrl;
    }
    
    /**
     * Set twitter image full path url.
     *
     * @param string $twitterImageFullPathUrl.
     *
     * @return void
     */
    public function setTwitterImageFullPathUrl($twitterImageFullPathUrl)
    {
        $this->twitterImageFullPathUrl = $twitterImageFullPathUrl;
    }
    
    /**
     * Get twitter image meta.
     *
     * @return array
     */
    public function getTwitterImageMeta()
    {
        return $this->twitterImageMeta;
    }
    
    /**
     * Set twitter image meta.
     *
     * @param array $twitterImageMeta.
     *
     * @return void
     */
    public function setTwitterImageMeta($twitterImageMeta = Array())
    {
        $this->twitterImageMeta = $twitterImageMeta;
    }
    
    /**
     * Get google plus title.
     *
     * @return string
     */
    public function getGooglePlusTitle()
    {
        return $this->googlePlusTitle;
    }
    
    /**
     * Set google plus title.
     *
     * @param string $googlePlusTitle.
     *
     * @return void
     */
    public function setGooglePlusTitle($googlePlusTitle)
    {
        $this->googlePlusTitle = $googlePlusTitle;
    }
    
    /**
     * Get google plus description.
     *
     * @return text
     */
    public function getGooglePlusDescription()
    {
        return $this->googlePlusDescription;
    }
    
    /**
     * Set google plus description.
     *
     * @param text $googlePlusDescription.
     *
     * @return void
     */
    public function setGooglePlusDescription($googlePlusDescription)
    {
        $this->googlePlusDescription = $googlePlusDescription;
    }
    
    /**
     * Get google plus image.
     *
     * @return string
     */
    public function getGooglePlusImage()
    {
        return $this->googlePlusImage;
    }
    
    /**
     * Set google plus image.
     *
     * @param string $googlePlusImage.
     *
     * @return void
     */
    public function setGooglePlusImage($googlePlusImage)
    {
        $this->googlePlusImage = $googlePlusImage;
    }
    
    /**
     * Get google plus image full path.
     *
     * @return string
     */
    public function getGooglePlusImageFullPath()
    {
        return $this->googlePlusImageFullPath;
    }
    
    /**
     * Set google plus image full path.
     *
     * @param string $googlePlusImageFullPath.
     *
     * @return void
     */
    public function setGooglePlusImageFullPath($googlePlusImageFullPath)
    {
        $this->googlePlusImageFullPath = $googlePlusImageFullPath;
    }
    
    /**
     * Get google plus image full path url.
     *
     * @return string
     */
    public function getGooglePlusImageFullPathUrl()
    {
        return $this->googlePlusImageFullPathUrl;
    }
    
    /**
     * Set google plus image full path url.
     *
     * @param string $googlePlusImageFullPathUrl.
     *
     * @return void
     */
    public function setGooglePlusImageFullPathUrl($googlePlusImageFullPathUrl)
    {
        $this->googlePlusImageFullPathUrl = $googlePlusImageFullPathUrl;
    }
    
    /**
     * Get google plus image meta.
     *
     * @return array
     */
    public function getGooglePlusImageMeta()
    {
        return $this->googlePlusImageMeta;
    }
    
    /**
     * Set google plus image meta.
     *
     * @param array $googlePlusImageMeta.
     *
     * @return void
     */
    public function setGooglePlusImageMeta($googlePlusImageMeta = Array())
    {
        $this->googlePlusImageMeta = $googlePlusImageMeta;
    }
    
    /**
     * Get whats app title.
     *
     * @return string
     */
    public function getWhatsAppTitle()
    {
        return $this->whatsAppTitle;
    }
    
    /**
     * Set whats app title.
     *
     * @param string $whatsAppTitle.
     *
     * @return void
     */
    public function setWhatsAppTitle($whatsAppTitle)
    {
        $this->whatsAppTitle = $whatsAppTitle;
    }
    
    /**
     * Get page analysis score.
     *
     * @return integer
     */
    public function getPageAnalysisScore()
    {
        return $this->pageAnalysisScore;
    }
    
    /**
     * Set page analysis score.
     *
     * @param integer $pageAnalysisScore.
     *
     * @return void
     */
    public function setPageAnalysisScore($pageAnalysisScore)
    {
        $this->pageAnalysisScore = $pageAnalysisScore;
    }
    
    /**
     * Get the module.
     *
     * @return string
     */
    public function getTheModule()
    {
        return $this->theModule;
    }
    
    /**
     * Set the module.
     *
     * @param string $theModule.
     *
     * @return void
     */
    public function setTheModule($theModule)
    {
        $this->theModule = $theModule;
    }
    
    /**
     * Get function of module.
     *
     * @return string
     */
    public function getFunctionOfModule()
    {
        return $this->functionOfModule;
    }
    
    /**
     * Set function of module.
     *
     * @param string $functionOfModule.
     *
     * @return void
     */
    public function setFunctionOfModule($functionOfModule)
    {
        $this->functionOfModule = $functionOfModule;
    }
    
    /**
     * Get object of module.
     *
     * @return string
     */
    public function getObjectOfModule()
    {
        return $this->objectOfModule;
    }
    
    /**
     * Set object of module.
     *
     * @param string $objectOfModule.
     *
     * @return void
     */
    public function setObjectOfModule($objectOfModule)
    {
        $this->objectOfModule = $objectOfModule;
    }
    
    /**
     * Get name of identifier.
     *
     * @return string
     */
    public function getNameOfIdentifier()
    {
        return $this->nameOfIdentifier;
    }
    
    /**
     * Set name of identifier.
     *
     * @param string $nameOfIdentifier.
     *
     * @return void
     */
    public function setNameOfIdentifier($nameOfIdentifier)
    {
        $this->nameOfIdentifier = $nameOfIdentifier;
    }
    
    /**
     * Get id of object.
     *
     * @return integer
     */
    public function getIdOfObject()
    {
        return $this->idOfObject;
    }
    
    /**
     * Set id of object.
     *
     * @param integer $idOfObject.
     *
     * @return void
     */
    public function setIdOfObject($idOfObject)
    {
        $this->idOfObject = $idOfObject;
    }
    
    /**
     * Get string of object.
     *
     * @return string
     */
    public function getStringOfObject()
    {
        return $this->stringOfObject;
    }
    
    /**
     * Set string of object.
     *
     * @param string $stringOfObject.
     *
     * @return void
     */
    public function setStringOfObject($stringOfObject)
    {
        $this->stringOfObject = $stringOfObject;
    }
    
    /**
     * Get extra infos.
     *
     * @return string
     */
    public function getExtraInfos()
    {
        return $this->extraInfos;
    }
    
    /**
     * Set extra infos.
     *
     * @param string $extraInfos.
     *
     * @return void
     */
    public function setExtraInfos($extraInfos)
    {
        $this->extraInfos = $extraInfos;
    }
    
    /**
     * Get created user id.
     *
     * @return integer
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }
    
    /**
     * Set created user id.
     *
     * @param integer $createdUserId.
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }
    
    /**
     * Get updated user id.
     *
     * @return integer
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }
    
    /**
     * Set updated user id.
     *
     * @param integer $updatedUserId.
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }
    
    /**
     * Get created date.
     *
     * @return datetime
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }
    
    /**
     * Set created date.
     *
     * @param datetime $createdDate.
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }
    
    /**
     * Get updated date.
     *
     * @return datetime
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }
    
    /**
     * Set updated date.
     *
     * @param datetime $updatedDate.
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }
    
    
    
    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @see MUSeo_Entity_Metatag::postLoadCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $usesCsvOutput = FormUtil::getPassedValue('usecsvext', false, 'GETPOST', FILTER_VALIDATE_BOOLEAN);
        
        // initialise the upload handler
        $uploadManager = new MUSeo_UploadHandler();
        $serviceManager = ServiceUtil::getManager();
        $controllerHelper = new MUSeo_Util_Controller($serviceManager);
        
        $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
        $this->formatTextualField('workflowState', $currentFunc, $usesCsvOutput, true);
        $this->formatTextualField('titleOfEntity', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('focusKeyword', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('title', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('description', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('keywords', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('robotsIndex', $currentFunc, $usesCsvOutput, true);
        $this->formatTextualField('robotsFollow', $currentFunc, $usesCsvOutput, true);
        $this->formatTextualField('robotsAdvanced', $currentFunc, $usesCsvOutput, true);
        $this['canonicalUrl'] = ((isset($this['canonicalUrl']) && !empty($this['canonicalUrl'])) ? DataUtil::formatForDisplay($this['canonicalUrl']) : '');
        $this['redirectUrl'] = ((isset($this['redirectUrl']) && !empty($this['redirectUrl'])) ? DataUtil::formatForDisplay($this['redirectUrl']) : '');
        $this->formatTextualField('facebookTitle', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('facebookDescription', $currentFunc, $usesCsvOutput);
        if (!empty($this['facebookImage'])) {
            try {
                $basePath = $controllerHelper->getFileBaseFolder('metatag', 'facebookImage');
            } catch (\Exception $e) {
                return LogUtil::registerError($e->getMessage());
            }
        
            $fullPath = $basePath . $this['facebookImage'];
            $this['facebookImageFullPath'] = $fullPath;
            $this['facebookImageFullPathURL'] = System::getBaseUrl() . $fullPath;
        
            // just some backwards compatibility stuff
            /*if (!isset($this['facebookImageMeta']) || !is_array($this['facebookImageMeta']) || !count($this['facebookImageMeta'])) {
                // assign new meta data
                $this['facebookImageMeta'] = $uploadManager->readMetaDataForFile($this['facebookImage'], $fullPath);
            }*/
        }
        $this->formatTextualField('twitterTitle', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('twitterDescription', $currentFunc, $usesCsvOutput);
        if (!empty($this['twitterImage'])) {
            try {
                $basePath = $controllerHelper->getFileBaseFolder('metatag', 'twitterImage');
            } catch (\Exception $e) {
                return LogUtil::registerError($e->getMessage());
            }
        
            $fullPath = $basePath . $this['twitterImage'];
            $this['twitterImageFullPath'] = $fullPath;
            $this['twitterImageFullPathURL'] = System::getBaseUrl() . $fullPath;
        
            // just some backwards compatibility stuff
            /*if (!isset($this['twitterImageMeta']) || !is_array($this['twitterImageMeta']) || !count($this['twitterImageMeta'])) {
                // assign new meta data
                $this['twitterImageMeta'] = $uploadManager->readMetaDataForFile($this['twitterImage'], $fullPath);
            }*/
        }
        $this->formatTextualField('googlePlusTitle', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('googlePlusDescription', $currentFunc, $usesCsvOutput);
        if (!empty($this['googlePlusImage'])) {
            try {
                $basePath = $controllerHelper->getFileBaseFolder('metatag', 'googlePlusImage');
            } catch (\Exception $e) {
                return LogUtil::registerError($e->getMessage());
            }
        
            $fullPath = $basePath . $this['googlePlusImage'];
            $this['googlePlusImageFullPath'] = $fullPath;
            $this['googlePlusImageFullPathURL'] = System::getBaseUrl() . $fullPath;
        
            // just some backwards compatibility stuff
            /*if (!isset($this['googlePlusImageMeta']) || !is_array($this['googlePlusImageMeta']) || !count($this['googlePlusImageMeta'])) {
                // assign new meta data
                $this['googlePlusImageMeta'] = $uploadManager->readMetaDataForFile($this['googlePlusImage'], $fullPath);
            }*/
        }
        $this->formatTextualField('whatsAppTitle', $currentFunc, $usesCsvOutput);
        $this['pageAnalysisScore'] = (int) ((isset($this['pageAnalysisScore']) && !empty($this['pageAnalysisScore'])) ? DataUtil::formatForDisplay($this['pageAnalysisScore']) : 0);
        $this->formatTextualField('theModule', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('functionOfModule', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('objectOfModule', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('nameOfIdentifier', $currentFunc, $usesCsvOutput);
        $this['idOfObject'] = (int) ((isset($this['idOfObject']) && !empty($this['idOfObject'])) ? DataUtil::formatForDisplay($this['idOfObject']) : 0);
        $this->formatTextualField('stringOfObject', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('extraInfos', $currentFunc, $usesCsvOutput);
    
        $this->prepareItemActions();
    
        return true;
    }
    
    /**
     * Formats a given textual field depending on it's actual kind of content.
     *
     * @param string  $fieldName     Name of field to be formatted.
     * @param string  $currentFunc   Name of current controller action.
     * @param string  $usesCsvOutput Whether the output is CSV or not (defaults to false).
     * @param boolean $allowZero     Whether 0 values are allowed or not (defaults to false).
     */
    protected function formatTextualField($fieldName, $currentFunc, $usesCsvOutput = false, $allowZero = false)
    {
        if ($currentFunc == 'edit') {
            // apply no changes when editing the content
            return;
        }
    
        if ($usesCsvOutput == 1) {
            // apply no changes for CSV output
            return;
        }
    
        $string = '';
        if (isset($this[$fieldName])) {
            if (!empty($this[$fieldName]) || ($allowZero && $this[$fieldName] == 0)) {
                $string = $this[$fieldName];
                if ($this->containsHtml($string)) {
                    $string = DataUtil::formatForDisplayHTML($string);
                } else {
                    $string = DataUtil::formatForDisplay($string);
                    $string = nl2br($string);
                }
            }
        }
    
        $this[$fieldName] = $string;
    }
    
    /**
     * Checks whether any html tags are contained in the given string.
     * See http://stackoverflow.com/questions/10778035/how-to-check-if-string-contents-have-any-html-in-it for implementation details.
     *
     * @param $string string The given input string.
     *
     * @return boolean Whether any html tags are found or not.
     */
    protected function containsHtml($string)
    {
        return preg_match("/<[^<]+>/", $string, $m) != 0;
    }
    
    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @see MUSeo_Entity_Metatag::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        $this->validate();
    
        return true;
    }
    
    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see MUSeo_Entity_Metatag::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        return true;
    }
    
    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MUSeo_Entity_Metatag::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
        // delete workflow for this entity
        $workflow = $this['__WORKFLOW__'];
        if ($workflow['id'] > 0) {
            $result = (bool) DBUtil::deleteObjectByID('workflows', $workflow['id']);
            if ($result === false) {
                $dom = ZLanguage::getModuleDomain('MUSeo');
                return LogUtil::registerError(__('Error! Could not remove stored workflow. Deletion has been aborted.', $dom));
            }
        }
    
        return true;
    }
    
    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MUSeo_Entity_Metatag::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        $objectId = $this->createCompositeIdentifier();
    
        // initialise the upload handler
        $uploadManager = new MUSeo_UploadHandler();
    
        $uploadFields = array('facebookImage', 'twitterImage', 'googlePlusImage');
        foreach ($uploadFields as $uploadField) {
            if (empty($this->$uploadField)) {
                continue;
            }
    
            // remove upload file (and image thumbnails)
            $uploadManager->deleteUploadFile('metatag', $this, $uploadField, $objectId);
        }
    
        return true;
    }
    
    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @see MUSeo_Entity_Metatag::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        $this->validate();
    
        return true;
    }
    
    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see MUSeo_Entity_Metatag::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        return true;
    }
    
    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MUSeo_Entity_Metatag::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        $this->validate();
    
        return true;
    }
    
    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MUSeo_Entity_Metatag::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        return true;
    }
    
    
    /**
     * Returns the formatted title conforming to the display pattern
     * specified for this entity.
     */
    public function getTitleFromDisplayPattern()
    {
        $serviceManager = ServiceUtil::getManager();
        $listHelper = new MUSeo_Util_ListEntries(ServiceUtil::getManager());
    
        $formattedTitle = ''
                . $this->getTitleOfEntity();
    
        return $formattedTitle;
    }
    
    /**
     * Initialises the validator and return it's instance.
     *
     * @return MUSeo_Entity_Validator_Metatag The validator for this entity.
     */
    public function initValidator()
    {
        if (!is_null($this->_validator)) {
            return $this->_validator;
        }
        $this->_validator = new MUSeo_Entity_Validator_Metatag($this);
    
        return $this->_validator;
    }
    
    /**
     * Sets/retrieves the workflow details.
     *
     * @param boolean $forceLoading load the workflow record.
     */
    public function initWorkflow($forceLoading = false)
    {
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $isReuse = FormUtil::getPassedValue('astemplate', '', 'GETPOST', FILTER_SANITIZE_STRING);
    
        // apply workflow with most important information
        $idColumn = 'id';
        
        $serviceManager = ServiceUtil::getManager();
        $workflowHelper = new MUSeo_Util_Workflow($serviceManager);
        
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = array(
            'module' => 'MUSeo',
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => $idColumn,
            'obj_id' => $this[$idColumn],
            'schemaname' => $schemaName);
        
        // load the real workflow only when required (e. g. when func is edit or delete)
        if ((!in_array($currentFunc, array('main', 'view', 'display')) && empty($isReuse)) || $forceLoading) {
            $result = Zikula_Workflow_Util::getWorkflowForObject($this, $this['_objectType'], $idColumn, 'MUSeo');
            if (!$result) {
                $dom = ZLanguage::getModuleDomain('MUSeo');
                LogUtil::registerError(__('Error! Could not load the associated workflow.', $dom));
            }
        }
        
        if (!is_object($this['__WORKFLOW__']) && !isset($this['__WORKFLOW__']['schemaname'])) {
            $workflow = $this['__WORKFLOW__'];
            $workflow['schemaname'] = $schemaName;
            $this['__WORKFLOW__'] = $workflow;
        }
    }
    
    /**
     * Resets workflow data back to initial state.
     * To be used after cloning an entity object.
     */
    public function resetWorkflow()
    {
        $this->setWorkflowState('initial');
    
        $serviceManager = ServiceUtil::getManager();
        $workflowHelper = new MUSeo_Util_Workflow($serviceManager);
    
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = array(
            'module' => 'MUSeo',
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => 'id',
            'obj_id' => 0,
            'schemaname' => $schemaName);
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return void.
     *
     * @throws Zikula_Exception Thrown if a validation error occurs
     */
    public function validate()
    {
        if ($this->_bypassValidation === true) {
            return;
        }
    
        $result = $this->initValidator()->validateAll();
        if (is_array($result)) {
            throw new Zikula_Exception($result['message'], $result['code'], $result['debugArray']);
        }
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data.
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }
    
        $currentLegacyControllerType = FormUtil::getPassedValue('lct', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $component = 'MUSeo:Metatag:';
        $instance = $this->id . '::';
        $dom = ZLanguage::getModuleDomain('MUSeo');
        if ($currentLegacyControllerType == 'admin') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'metatag', 'id' => $this['id'])),
                    'icon' => 'preview',
                    'linkTitle' => __('Open preview page', $dom),
                    'linkText' => __('Preview', $dom)
                );
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'display', 'arguments' => array('ot' => 'metatag', 'id' => $this['id'])),
                    'icon' => 'display',
                    'linkTitle' => str_replace('"', '', $this->getTitleFromDisplayPattern()),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'metatag', 'id' => $this['id'])),
                        'icon' => 'edit',
                        'linkTitle' => __('Edit', $dom),
                        'linkText' => __('Edit', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'metatag', 'astemplate' => $this['id'])),
                        'icon' => 'saveas',
                        'linkTitle' => __('Reuse for new item', $dom),
                        'linkText' => __('Reuse', $dom)
                    );
                }
                if (SecurityUtil::checkPermission($component, $instance, ACCESS_DELETE)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'delete', 'arguments' => array('ot' => 'metatag', 'id' => $this['id'])),
                        'icon' => 'delete',
                        'linkTitle' => __('Delete', $dom),
                        'linkText' => __('Delete', $dom)
                    );
                }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'admin', 'func' => 'view', 'arguments' => array('ot' => 'metatag')),
                    'icon' => 'back',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
        if ($currentLegacyControllerType == 'user') {
            if (in_array($currentFunc, array('main', 'view'))) {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'metatag', 'id' => $this['id'])),
                    'icon' => 'display',
                    'linkTitle' => str_replace('"', '', $this->getTitleFromDisplayPattern()),
                    'linkText' => __('Details', $dom)
                );
            }
            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'metatag', 'id' => $this['id'])),
                        'icon' => 'edit',
                        'linkTitle' => __('Edit', $dom),
                        'linkText' => __('Edit', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'metatag', 'astemplate' => $this['id'])),
                        'icon' => 'saveas',
                        'linkTitle' => __('Reuse for new item', $dom),
                        'linkText' => __('Reuse', $dom)
                    );
                }
                if (SecurityUtil::checkPermission($component, $instance, ACCESS_DELETE)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'delete', 'arguments' => array('ot' => 'metatag', 'id' => $this['id'])),
                        'icon' => 'delete',
                        'linkTitle' => __('Delete', $dom),
                        'linkText' => __('Delete', $dom)
                    );
                }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = array(
                    'url' => array('type' => 'user', 'func' => 'view', 'arguments' => array('ot' => 'metatag')),
                    'icon' => 'back',
                    'linkTitle' => __('Back to overview', $dom),
                    'linkText' => __('Back to overview', $dom)
                );
            }
        }
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return Array The resulting arguments list.
     */
    public function createUrlArgs()
    {
        $args = array('ot' => $this['_objectType']);
    
        $args['id'] = $this['id'];
    
        if (property_exists($this, 'slug')) {
            $args['slug'] = $this['slug'];
        }
    
        return $args;
    }
    
    /**
     * Create concatenated identifier string (for composite keys).
     *
     * @return String concatenated identifiers.
     */
    public function createCompositeIdentifier()
    {
        $itemId = $this['id'];
    
        return $itemId;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'museo.ui_hooks.metatags';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: array()
     * 
     * @return array of entity objects.
     */
    public function getRelatedObjectsToPersist(&$objects = array()) 
    {
        return array();
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     */
    public function __toString()
    {
        return $this->getId();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     * (4) http://www.pantovic.com/article/26/doctrine2-entity-cloning
     */
    public function __clone()
    {
        // If the entity has an identity, proceed as normal.
        if ($this->id) {
            // unset identifiers
            $this->setId(0);
    
            // init validator
            $this->initValidator();
    
            // reset Workflow
            $this->resetWorkflow();
    
            // reset upload fields
            $this->setFacebookImage('');
            $this->setFacebookImageMeta(array());
            $this->setTwitterImage('');
            $this->setTwitterImageMeta(array());
            $this->setGooglePlusImage('');
            $this->setGooglePlusImageMeta(array());
    
            $this->setCreatedDate(null);
            $this->setCreatedUserId(null);
            $this->setUpdatedDate(null);
            $this->setUpdatedUserId(null);
    
            
        }
        // otherwise do nothing, do NOT throw an exception!
    }
}
