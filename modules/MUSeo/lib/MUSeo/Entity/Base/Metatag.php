<?php
/**
 * MUSeo.
 *
 * @copyright Michael ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUSeo
 * @author Michael ueberschaer <konakt@webdesign-in-bremen.com>.
 * @link http://webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Sun Nov 25 13:18:41 CET 2012.
 */

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for metatag entities.
 *
 * @abstract
 */
abstract class MUSeo_Entity_Base_Metatag extends Zikula_EntityAccess
{

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'metatag';

    /**
     * @var array List of primary key field names
     */
    protected $_idFields = array();

    /**
     * @var MUSeo_Entity_Validator_Metatag The validator for this entity
     */
    protected $_validator = null;

    /**
     * @var boolean Whether this entity supports unique slugs
     */
    protected $_hasUniqueSlug = false;

    /**
     * @var array List of available item actions
     */
    protected $_actions = array();



    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id.
     */
    protected $id = 0;


    /**
     * @ORM\Column(length=255)
     * @var string $titleOfEntity.
     */
    protected $titleOfEntity = '';


    /**
     * @ORM\Column(length=255)
     * @var string $title.
     */
    protected $title = '';


    /**
     * @ORM\Column(length=255)
     * @var string $description.
     */
    protected $description = '';


    /**
     * @ORM\Column(length=255)
     * @var string $keywords.
     */
    protected $keywords = '';


    /**
     * @ORM\Column(length=50)
     * @var string $theModule.
     */
    protected $theModule = '';


    /**
     * @ORM\Column(length=50)
     * @var string $functionOfModule.
     */
    protected $functionOfModule = '';


    /**
     * @ORM\Column(length=50)
     * @var string $objectOfModule.
     */
    protected $objectOfModule = '';


    /**
     * @ORM\Column(length=20)
     * @var string $nameOfIdentifier.
     */
    protected $nameOfIdentifier = '';


    /**
     * @ORM\Column(type="bigint")
     * @var bigint $idOfObject.
     */
    protected $idOfObject = 0;


    /**
     * @ORM\Column(length=50)
     * @var string $stringOfObject.
     */
    protected $stringOfObject = '';


    /**
     * @ORM\Column(length=255)
     * @var string $extraInfos.
     */
    protected $extraInfos = '';


    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * @var integer $createdUserId.
     */
    protected $createdUserId;

    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * @var integer $updatedUserId.
     */
    protected $updatedUserId;

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @var datetime $createdDate.
     */
    protected $createdDate;

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="update")
     * @var datetime $updatedDate.
     */
    protected $updatedDate;



    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->id = 1;
        $this->_idFields = array('id');
        $this->initValidator();
        $this->_hasUniqueSlug = false;
    }

    /**
     * Get _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }

    /**
     * Set _object type.
     *
     * @param string $_objectType.
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }


    /**
     * Get _id fields.
     *
     * @return array
     */
    public function get_idFields()
    {
        return $this->_idFields;
    }

    /**
     * Set _id fields.
     *
     * @param array $_idFields.
     *
     * @return void
     */
    public function set_idFields(array $_idFields = Array())
    {
        $this->_idFields = $_idFields;
    }


    /**
     * Get _validator.
     *
     * @return MUSeo_Entity_Validator_Metatag
     */
    public function get_validator()
    {
        return $this->_validator;
    }

    /**
     * Set _validator.
     *
     * @param MUSeo_Entity_Validator_Metatag $_validator.
     *
     * @return void
     */
    public function set_validator(MUSeo_Entity_Validator_Metatag $_validator = null)
    {
        $this->_validator = $_validator;
    }


    /**
     * Get _has unique slug.
     *
     * @return boolean
     */
    public function get_hasUniqueSlug()
    {
        return $this->_hasUniqueSlug;
    }

    /**
     * Set _has unique slug.
     *
     * @param boolean $_hasUniqueSlug.
     *
     * @return void
     */
    public function set_hasUniqueSlug($_hasUniqueSlug)
    {
        $this->_hasUniqueSlug = $_hasUniqueSlug;
    }


    /**
     * Get _actions.
     *
     * @return array
     */
    public function get_actions()
    {
        return $this->_actions;
    }

    /**
     * Set _actions.
     *
     * @param array $_actions.
     *
     * @return void
     */
    public function set_actions(array $_actions = Array())
    {
        $this->_actions = $_actions;
    }



    /**
     * Get id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set id.
     *
     * @param integer $id.
     *
     * @return void
     */
    public function setId($id)
    {
        if ($id != $this->id) {
            $this->id = $id;
        }
    }

    /**
     * Get title of entity.
     *
     * @return string
     */
    public function getTitleOfEntity()
    {
        return $this->titleOfEntity;
    }

    /**
     * Set title of entity.
     *
     * @param string $titleOfEntity.
     *
     * @return void
     */
    public function setTitleOfEntity($titleOfEntity)
    {
        if ($titleOfEntity != $this->titleOfEntity) {
            $this->titleOfEntity = $titleOfEntity;
        }
    }

    /**
     * Get title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set title.
     *
     * @param string $title.
     *
     * @return void
     */
    public function setTitle($title)
    {
        if ($title != $this->title) {
            $this->title = $title;
        }
    }

    /**
     * Get description.
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set description.
     *
     * @param string $description.
     *
     * @return void
     */
    public function setDescription($description)
    {
        if ($description != $this->description) {
            $this->description = $description;
        }
    }

    /**
     * Get keywords.
     *
     * @return string
     */
    public function getKeywords()
    {
        return $this->keywords;
    }

    /**
     * Set keywords.
     *
     * @param string $keywords.
     *
     * @return void
     */
    public function setKeywords($keywords)
    {
        if ($keywords != $this->keywords) {
            $this->keywords = $keywords;
        }
    }

    /**
     * Get the module.
     *
     * @return string
     */
    public function getTheModule()
    {
        return $this->theModule;
    }

    /**
     * Set the module.
     *
     * @param string $theModule.
     *
     * @return void
     */
    public function setTheModule($theModule)
    {
        if ($theModule != $this->theModule) {
            $this->theModule = $theModule;
        }
    }

    /**
     * Get function of module.
     *
     * @return string
     */
    public function getFunctionOfModule()
    {
        return $this->functionOfModule;
    }

    /**
     * Set function of module.
     *
     * @param string $functionOfModule.
     *
     * @return void
     */
    public function setFunctionOfModule($functionOfModule)
    {
        if ($functionOfModule != $this->functionOfModule) {
            $this->functionOfModule = $functionOfModule;
        }
    }

    /**
     * Get object of module.
     *
     * @return string
     */
    public function getObjectOfModule()
    {
        return $this->objectOfModule;
    }

    /**
     * Set object of module.
     *
     * @param string $objectOfModule.
     *
     * @return void
     */
    public function setObjectOfModule($objectOfModule)
    {
        if ($objectOfModule != $this->objectOfModule) {
            $this->objectOfModule = $objectOfModule;
        }
    }

    /**
     * Get name of identifier.
     *
     * @return string
     */
    public function getNameOfIdentifier()
    {
        return $this->nameOfIdentifier;
    }

    /**
     * Set name of identifier.
     *
     * @param string $nameOfIdentifier.
     *
     * @return void
     */
    public function setNameOfIdentifier($nameOfIdentifier)
    {
        if ($nameOfIdentifier != $this->nameOfIdentifier) {
            $this->nameOfIdentifier = $nameOfIdentifier;
        }
    }

    /**
     * Get id of object.
     *
     * @return bigint
     */
    public function getIdOfObject()
    {
        return $this->idOfObject;
    }

    /**
     * Set id of object.
     *
     * @param bigint $idOfObject.
     *
     * @return void
     */
    public function setIdOfObject($idOfObject)
    {
        if ($idOfObject != $this->idOfObject) {
            $this->idOfObject = $idOfObject;
        }
    }

    /**
     * Get string of object.
     *
     * @return string
     */
    public function getStringOfObject()
    {
        return $this->stringOfObject;
    }

    /**
     * Set string of object.
     *
     * @param string $stringOfObject.
     *
     * @return void
     */
    public function setStringOfObject($stringOfObject)
    {
        if ($stringOfObject != $this->stringOfObject) {
            $this->stringOfObject = $stringOfObject;
        }
    }

    /**
     * Get extra infos.
     *
     * @return string
     */
    public function getExtraInfos()
    {
        return $this->extraInfos;
    }

    /**
     * Set extra infos.
     *
     * @param string $extraInfos.
     *
     * @return void
     */
    public function setExtraInfos($extraInfos)
    {
        if ($extraInfos != $this->extraInfos) {
            $this->extraInfos = $extraInfos;
        }
    }


    /**
     * Get created user id.
     *
     * @return integer[]
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }

    /**
     * Set created user id.
     *
     * @param integer[] $createdUserId.
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }

    /**
     * Get updated user id.
     *
     * @return integer[]
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }

    /**
     * Set updated user id.
     *
     * @param integer[] $updatedUserId.
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }

    /**
     * Get created date.
     *
     * @return datetime[]
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }

    /**
     * Set created date.
     *
     * @param datetime[] $createdDate.
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }

    /**
     * Get updated date.
     *
     * @return datetime[]
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }

    /**
     * Set updated date.
     *
     * @param datetime[] $updatedDate.
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }




    /**
     * Initialise validator and return it's instance.
     *
     * @return MUSeo_Entity_Validator_Metatag The validator for this entity.
     */
    public function initValidator()
    {
        if (!is_null($this->_validator)) {
            return $this->_validator;
        }
        $this->_validator = new MUSeo_Entity_Validator_Metatag($this);
        return $this->_validator;
    }

    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return void.
     */
    public function validate()
    {
        $result = $this->initValidator()->validateAll();
        if (is_array($result)) {
            throw new Zikula_Exception($result['message'], $result['code'], $result['debugArray']);
        }
    }

    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data.
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }

        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $dom = ZLanguage::getModuleDomain('MUSeo');
        if ($currentType == 'admin') {
            if (in_array($currentFunc, array('main', 'view'))) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'display', 'arguments' => array('ot' => 'metatag', 'id' => $this['id'])),
                        'icon' => 'display',
                        'linkTitle' => str_replace('"', '', $this['titleOfEntity']),
                        'linkText' => __('Details', $dom)
                    );
            }

            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                if (SecurityUtil::checkPermission('MUSeo::', '.*', ACCESS_EDIT)) {

                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'metatag', 'id' => $this['id'])),
                        'icon' => 'edit',
                        'linkTitle' => __('Edit', $dom),
                        'linkText' => __('Edit', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'metatag', 'astemplate' => $this['id'])),
                        'icon' => 'saveas',
                        'linkTitle' => __('Reuse for new item', $dom),
                        'linkText' => __('Reuse', $dom)
                    );
                }
                if (SecurityUtil::checkPermission('MUSeo::', '.*', ACCESS_DELETE)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'delete', 'arguments' => array('ot' => 'metatag', 'id' => $this['id'])),
                        'icon' => 'delete',
                        'linkTitle' => __('Delete', $dom),
                        'linkText' => __('Delete', $dom)
                    );
                }
            }
            if ($currentFunc == 'display') {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'view', 'arguments' => array('ot' => 'metatag')),
                        'icon' => 'back',
                        'linkTitle' => __('Back to overview', $dom),
                        'linkText' => __('Back to overview', $dom)
                    );
            }
        }
        if ($currentType == 'user') {

        }
    }




    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @see MUSeo_Entity_Metatag::postLoadCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';

        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);

        $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
    if ($currentFunc != 'edit') {
        $this['titleOfEntity'] = ((isset($this['titleOfEntity']) && !empty($this['titleOfEntity'])) ? DataUtil::formatForDisplayHTML($this['titleOfEntity']) : '');
    }
    if ($currentFunc != 'edit') {
        $this['title'] = ((isset($this['title']) && !empty($this['title'])) ? DataUtil::formatForDisplayHTML($this['title']) : '');
    }
    if ($currentFunc != 'edit') {
        $this['description'] = ((isset($this['description']) && !empty($this['description'])) ? DataUtil::formatForDisplayHTML($this['description']) : '');
    }
    if ($currentFunc != 'edit') {
        $this['keywords'] = ((isset($this['keywords']) && !empty($this['keywords'])) ? DataUtil::formatForDisplayHTML($this['keywords']) : '');
    }
    if ($currentFunc != 'edit') {
        $this['theModule'] = ((isset($this['theModule']) && !empty($this['theModule'])) ? DataUtil::formatForDisplayHTML($this['theModule']) : '');
    }
    if ($currentFunc != 'edit') {
        $this['functionOfModule'] = ((isset($this['functionOfModule']) && !empty($this['functionOfModule'])) ? DataUtil::formatForDisplayHTML($this['functionOfModule']) : '');
    }
    if ($currentFunc != 'edit') {
        $this['objectOfModule'] = ((isset($this['objectOfModule']) && !empty($this['objectOfModule'])) ? DataUtil::formatForDisplayHTML($this['objectOfModule']) : '');
    }
    if ($currentFunc != 'edit') {
        $this['nameOfIdentifier'] = ((isset($this['nameOfIdentifier']) && !empty($this['nameOfIdentifier'])) ? DataUtil::formatForDisplayHTML($this['nameOfIdentifier']) : '');
    }
        $this['idOfObject'] = (int) ((isset($this['idOfObject']) && !empty($this['idOfObject'])) ? DataUtil::formatForDisplay($this['idOfObject']) : 0);
    if ($currentFunc != 'edit') {
        $this['stringOfObject'] = ((isset($this['stringOfObject']) && !empty($this['stringOfObject'])) ? DataUtil::formatForDisplayHTML($this['stringOfObject']) : '');
    }
    if ($currentFunc != 'edit') {
        $this['extraInfos'] = ((isset($this['extraInfos']) && !empty($this['extraInfos'])) ? DataUtil::formatForDisplayHTML($this['extraInfos']) : '');
    }
        $this->prepareItemActions();
        return true;
    }

    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @see MUSeo_Entity_Metatag::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        // echo 'inserting a record ...';
        $this->validate();
        return true;
    }

    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see MUSeo_Entity_Metatag::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        // echo 'inserted a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MUSeo_Entity_Metatag::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
/*        // delete workflow for this entity
        $result = Zikula_Workflow_Util::deleteWorkflow($this);
        if ($result === false) {
            $dom = ZLanguage::getModuleDomain('MUSeo');
            return LogUtil::registerError(__('Error! Could not remove stored workflow.', $dom));
        }*/
        return true;
    }

    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MUSeo_Entity_Metatag::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        // echo 'deleted a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @see MUSeo_Entity_Metatag::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        // echo 'updating a record ...';
        $this->validate();
        return true;
    }

    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see MUSeo_Entity_Metatag::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        // echo 'updated a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MUSeo_Entity_Metatag::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        // echo 'saving a record ...';
        $this->validate();
        return true;
    }

    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MUSeo_Entity_Metatag::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        // echo 'saved a record ...';
        return true;
    }

}
